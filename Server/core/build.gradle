buildscript {
    dependencies {
        classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.10")
    }
}

plugins {

    id 'java'
}

apply plugin: "com.ewerk.gradle.plugins.querydsl"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

group = 'com.ttrip'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client' // MariaDB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // WebClient 사용을 위한 의존성
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // qlrm(jpql결과를 DTO를 mapping해주기 위한 라이브러리)
    implementation 'org.qlrm:qlrm:2.0.2'

    // query dsl
    implementation 'com.querydsl:querydsl-jpa'
    implementation 'com.querydsl:querydsl-apt'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // [JWT]
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.springframework.security:spring-security-core:5.7.6'
    //Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    //fcm
    implementation 'com.google.firebase:firebase-admin:9.1.1'
    implementation group: 'com.squareup.okhttp', name: 'okhttp', version: '2.7.5'

    //swagger
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'

    implementation 'org.springframework.boot:spring-boot-starter-log4j2'   // log4j2
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.10.3'   // log4j2
}

test {
    useJUnitPlatform()
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

// query dsl을 위한 설정
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    library = "com.querydsl:querydsl-apt"
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', querydslDir]
        }
    }
}

compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
    querydsl.extendsFrom compileClasspath
}


